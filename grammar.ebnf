program = {variableDeclaration | functionDefinition};

statement = ifStatement |
            whileStatement |
            forEachStatement |
            variableDeclaration |
            assignment |
            functionCall |
            returnStatement;

functionDefinition = functionReturnType identifier "(" parameters ")" statementBlock;

parameters = [parameter, {"," parameter}];

parameter = type identifier;

statementBlock = "{" {statement} "}";

ifStatement = "if" "(" expression ")" statementBlock ["else" statementBlock];

whileStatement = "while" "(" expression ")" statementBlock;

forEachStatement = "foreach" "(" simpleType identifier ":" expression ")" statementBlock;

variableDeclaration = type identifier ["=" expression] ";";

assignment = (identifier "=" expression ";") |
             (identifier "[" expression "]" "=" expression ";");

functionCall = identifier "(" arguments ")";

arguments = [expression, {"," expression}];

returnStatement = "return" expression ";";

expression = andExpression {orOperator andExpression};

andExpression = relationExpression {andOperator relationExpression};

relationExpression = additiveExpression [relationOperator additiveExpression];

additiveExpression = multiplicativeExpression {additiveOperator multiplicativeExpression};

multiplicativeExpression = nullableSingleExpression {multiplicativeOperator nullableSingleExpression};

nullableSingleExpression = negatedSingleExpression ["?"];

negatedSingleExpression = ["!" | "-"] castedExpression;

castedExpression = dictKeyExpression ["as" simpleType];

dictKeyExpression = simpleExpression ["[" expression "]"];

simpleExpression = identifier |
                   literal |
                   "(" expression ")" |
                   functionCall;

functionReturnType = type | "void";

type = simpleType | parametrizedType;

parametrizedType = collectionType "[" simpleType "," simpleType "]";

simpleType = "int" |
             "float" |
             "string";

collectionType = "dict";

orOperator = "||";

andOperator = "&&";

relationOperator = "<" |
                   ">" |
                   "<=" |
                   ">=" |
                   "==" |
                   "!=";

additiveOperator = "+" |
                   "-";

multiplicativeOperator = "*" |
                         "/"
                         "%";

identifier = (letter | "_") {letter | digit | "_"};

literal = stringLiteral |
          intLiteral |
          floatLiteral |
          dictLiteral |
          "null";

letter = "a".."z" | "A".."Z";

digit = "0" | nonZeroDigit;

nonZeroDigit = "1" .. "9";

stringLiteral = "\"" .. "\"";

intLiteral = "0" | nonZeroDigit {digit};

floatLiteral = "0." digit {digit} |
               nonZeroDigit {digit} "." digit {digit};

dictLiteral = "{" [dictLiteralKeyValuePair {"," dictLiteralKeyValuePair }] "}";

dictLiteralKeyValuePair = expression ":" expression;