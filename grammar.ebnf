program = {variableDeclaration | functionDefinition};

statement = ifStatement |
            whileStatement |
            forEachStatement |
            variableDeclaration |
            assignment |
            functionCall |
            returnStatement;

functionDefinition = functionReturnType identifier parameterList statementBlock;

parameterList = "(" [type identifier, {"," type identifier}] ")";

statementBlock = "{" {statement} "}";

ifStatement = "if" "(" expression ")" statementBlock ["else" statementBlock];

whileStatement = "while" "(" expression ")" statementBlock;

forEachStatement = "foreach" "(" simpleType identifier ":" identifier ")" statementBlock;

variableDeclaration = type identifier ["=" expression] ";";

assignment = (identifier "=" expression ";") |
             (identifier "[" expression "]" "=" expression ";");

functionCall = functionCallAsExpression ";";

argumentList = "(" [expression, {"," expression}] ")";

returnStatement = "return" expression ";";

expression = andExpression {orOperator andExpression};

andExpression = relationExpression {andOperator relationExpression};

relationExpression = additiveExpression {relationOperator additiveExpression};

additiveExpression = multiplicativeExpression {additiveOperator multiplicativeExpression};

multiplicativeExpression = negatedSingleExpression {multiplicativeOperator negatedSingleExpression};

negatedSingleExpression = ["!" | "-"] castedExpression;

castedExpression = singleExpression ["as" simpleType];

singleExpression = identifier |
                   literal |
                   "(" expression ")" |
                   functionCallAsExpression |
                   identifier "[" expression "]" ["?"];

functionCallAsExpression = identifier argumentList;

functionReturnType = type | "void";

type = simpleType | parametrizedType;

parametrizedType = collectionType "[" simpleType "," simpleType "]";

collectionType = "dict";

simpleType = "int" |
             "float" |
             "string";

relationOperator = "<" |
                   ">" |
                   "<=" |
                   ">=" |
                   "==" |
                   "!=";

orOperator = "||";

andOperator = "&&";

additiveOperator = "+" |
                   "-";

multiplicativeOperator = "*" |
                         "/"
                         "%";

identifier = (letter | "_") {letter | digit | "_"};

literal = stringLiteral |
          numberLiteral |
          dictionaryLiteral |
          "null";

letter = "a".."z" | "A".."Z";

digit = "0" | nonZeroDigit;

nonZeroDigit = "1" .. "9";

stringLiteral = "\"" .. "\"";

numberLiteral = nonZeroDigit {digit} ["." digit {digit}];

dictionaryLiteral = "{" [expression ":" expression {"," expression ":" expression }] "}";
