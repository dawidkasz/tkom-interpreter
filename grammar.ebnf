program = {variableDeclaration | functionDefinition};

statement = ifStatement |
            whileStatement |
            variableDeclaration |
            assignment |
            functionCall |
            returnStatement |
            tryCatchStatement
            throwStatement;

functionDefinition = "def" identifier parameterList statementBlock;

parameterList = "(" [identifier, {"," identifier}] ")";

statementBlock = "{" {statement} "}";

ifStatement = "if" "(" expression ")" statementBlock ["else" statementBlock];

whileStatement = "while" "(" expression ")" statementBlock;

variableDeclaration = "var" identifier ["=" expression] ";";

assignment = identifier "=" expression |
             identifier "[" dictionaryKey "]" "=" expression ";";

dictionaryKey = identifier | literal;

functionCall = identifier "(" [expression, {"," expression}] ")" ";";

returnStatement = "return" expression ";";

tryCatchStatement = "try" statementBlock "catch" ["(" identifier ")"] statementBlock;

throwStatement = "throw" expression ";";

expression = multiplicativeExpression {additiveOperator multiplicativeExpression};

multiplicativeExpression = orExpression {multiplicativeOperator orExpression};

orExpression = andExpression {orOperator andExpression};

andExpression = relationExpression {andOperator relationExpression};

relationExpression = equalExpression {relationOperator equalExpression};

equalExpression = possibleNegatedSingleExpression {equalExpression possibleNegatedSingleExpression};

possibleNegatedSingleExpression = singleExpression | ("!" singleExpression);

singleExpression = identifier |
                   literal |
                   "(" expression ")" |
                   identifier "[" dictionaryKey "]" |
                   functionCall |
                   nonNullableExpression;

nonNullableExpression = singleExpression "?";

equalOperator = "==" |
                "!=";

relationOperator = "<" |
                   ">" |
                   "<=" |
                   ">=";

orOperator = "||";

andOperator = "&&";

additiveOperator = "+" |
                   "-";

multiplicativeOperator = "*" |
                         "/"
                         "%";

identifier = letter {letter | digit | "_"};

literal = stringLiteral |
          numberLiteral |
          dictionaryLiteral |
          nullLiteral;

letter = "a".."z" | "A".."Z";


nonZeroDigit = "1" .. "9";

digit = "0" | nonZeroDigit;

stringLiteral = "\"" .. "\"";

numberLiteral = nonZeroDigit {digit} ["." digit {digit}];

dictionaryLiteral = "{" [singleExpression ":" singleExpression {"," singleExpression ":" singleExpression }] "}";

nullLiteral = "null";